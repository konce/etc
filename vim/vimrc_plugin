" <vundle> ------------------------
" https://github.com/gmarik/Vundle.vim
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.

" plugin on GitHub repo
Plugin 'scrooloose/nerdtree'
Plugin 'tpope/vim-surround'
Plugin 'Townk/vim-autoclose'
Plugin 'pangloss/vim-javascript'
Plugin 'gabrielelana/vim-markdown'
Plugin 'othree/html5.vim'
Plugin 'cakebaker/scss-syntax.vim'
Plugin 'wavded/vim-stylus'
" Plugin 'SirVer/ultisnips'
Plugin 'honza/vim-snippets'
Plugin 'Shougo/neocomplete'
Plugin 'Shougo/neosnippet'
" Plugin 'Shougo/neosnippet-snippets'

" git repos on your local machine (i.e. when working on your own plugin)
" Plugin 'file:///home/gmarik/path/to/plugin'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
" ------------------------ </vundle>

" <nerdtree> ------------------------
" The NERD tree allows you to explore your filesystem and to open files and directories
" Plugin 'scrooloose/nerdtree'
" open a NERDTree automatically when vim starts up
autocmd vimenter * NERDTree
map <leader>n :NERDTreeToggle<CR>
" h NERD_Tree.txt
" https://github.com/scrooloose/nerdtree
" ------------------------ </nerdtree>

" <surround> ------------------------
" provides mappings to easily delete, change and add such surroundings in pairs.
" Plugin 'tpope/vim-surround'
" https://github.com/tpope/vim-surround
" ------------------------ </surround>

" <autoclose> ------------------------
" This plugin for Vim enable an auto-close chars feature for you.
" Plugin 'Townk/vim-autoclose'
" https://github.com/Townk/vim-autoclose
" ------------------------ </autoclose>

" <javascript> ------------------------
" Vastly improved Javascript indentation and syntax support in Vim
" Plugin 'pangloss/vim-javascript'
let b:javascript_fold=1
" 打开javascript对dom、html和css的支持
" let javascript_enable_domhtmlcss = 1
" https://github.com/pangloss/vim-javascript
" ------------------------ </javascript>

" <markdown> ------------------------
" Markdown for Vim: a complete environment to create Markdown files with a syntax highlight that don't sucks!
" Plugin 'gabrielelana/vim-markdown'
" https://github.com/gabrielelana/vim-markdown
" ------------------------ </markdown>

" <emmet> ------------------------
" emmet for vim. zencoding
" Plugin 'mattn/emmet-vim'
" https://github.com/mattn/emmet-vim
" ------------------------ </emmet>

" <html5> ------------------------
" HTML5 + inline SVG omnicomplete funtion, indent and syntax for Vim
" Plugin 'othree/html5.vim'
" https://github.com/othree/html5.vim
" ------------------------ </html5>

" <scss> ------------------------
" Vim syntax file for scss
" Plugin 'cakebaker/scss-syntax.vim'
" https://github.com/cakebaker/scss-syntax.vim
" ------------------------ </scss>

" <stylus> ------------------------
" Syntax Highlighting for Stylus
" Plugin 'wavded/vim-stylus'
" https://github.com/wavded/vim-stylus
" ------------------------ </stylus>

" <ultisnips> ------------------------
" The ultimate snippet solution for Vim
" Plugin 'SirVer/ultisnips'
" let g:UltiSnipsExpandTrigger="<c-l>"
" let g:UltiSnipsJumpForwardTrigger="<c-l>"
" let g:UltiSnipsJumpBackwardTrigger="<c-q>"
" g:UltiSnipsExpandTrigger               <tab>
" g:UltiSnipsListSnippets                <c-tab>
" g:UltiSnipsJumpForwardTrigger          <c-j>
" g:UltiSnipsJumpBackwardTrigger         <c-k>
" 默认在.vim/UltiSnips目录下添加。见g:UltiSnipsSnippetDirectories
" https://github.com/SirVer/ultisnips
" ------------------------ </ultisnips>

" <ultisnippets> ------------------------
" vim-snipmate default snippets (Previously snipmate-snippets)
" Plugin 'honza/vim-snippets'
" https://github.com/honza/vim-snippets
" ------------------------ </ultisnippets>

" <neocomplete> ------------------------
" Plugin 'Shougo/neocomplete'
"Note: This option must set it in .vimrc(_vimrc).  NOT IN .gvimrc(_gvimrc)!
" Disable AutoComplPop.
let g:acp_enableAtStartup = 0
" Use neocomplete.
let g:neocomplete#enable_at_startup = 1
" Use smartcase.
let g:neocomplete#enable_smart_case = 1
" Set minimum syntax keyword length.
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
    \ 'default' : '',
    \ 'vimshell' : $HOME.'/.vimshell_hist',
    \ 'scheme' : $HOME.'/.gosh_completions'
        \ }

" Define keyword.
if !exists('g:neocomplete#keyword_patterns')
    let g:neocomplete#keyword_patterns = {}
endif
let g:neocomplete#keyword_patterns['default'] = '\h\w*'

" Plugin key-mappings.
inoremap <expr><C-g>     neocomplete#undo_completion()
inoremap <expr><C-l>     neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
  " For no inserting <CR> key.
  "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
endfunction
" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>  neocomplete#close_popup()
inoremap <expr><C-e>  neocomplete#cancel_popup()
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? neocomplete#close_popup() : "\<Space>"

" For cursor moving in insert mode(Not recommended)
"inoremap <expr><Left>  neocomplete#close_popup() . "\<Left>"
"inoremap <expr><Right> neocomplete#close_popup() . "\<Right>"
"inoremap <expr><Up>    neocomplete#close_popup() . "\<Up>"
"inoremap <expr><Down>  neocomplete#close_popup() . "\<Down>"
" Or set this.
"let g:neocomplete#enable_cursor_hold_i = 1
" Or set this.
"let g:neocomplete#enable_insert_char_pre = 1

" AutoComplPop like behavior.
"let g:neocomplete#enable_auto_select = 1

" Shell like behavior(not recommended).
"set completeopt+=longest
"let g:neocomplete#enable_auto_select = 1
"let g:neocomplete#disable_auto_complete = 1
"inoremap <expr><TAB>  pumvisible() ? "\<Down>" : "\<C-x>\<C-u>"

" Enable omni completion.
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif
"let g:neocomplete#sources#omni#input_patterns.php = '[^. \t]->\h\w*\|\h\w*::'
"let g:neocomplete#sources#omni#input_patterns.c = '[^.[:digit:] *\t]\%(\.\|->\)'
"let g:neocomplete#sources#omni#input_patterns.cpp = '[^.[:digit:] *\t]\%(\.\|->\)\|\h\w*::'

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" https://github.com/Shougo/neocomplete.vim/
" ------------------------ </neocomplete>

" <neosnippet> ------------------------
" Plugin 'Shougo/neosnippet'
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)"
\: "\<TAB>"

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'

" https://github.com/Shougo/neosnippet.vim
" ------------------------ </neosnippet>

" <neosnippet-snippets> ------------------------
" Plugin 'Shougo/neosnippet-snippets'
" https://github.com/Shougo/neosnippet-snippets
" ------------------------ </neosnippet-snippets>
